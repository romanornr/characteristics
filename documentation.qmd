---
title: "documentation"
format: html
editor: visual
toc: true
---

## Introduction

This document outlines the steps taken to analyze a dataset containing information about Muscle Dystrophy (DMD) patients and Healthy Controls (HC)

------------------------------------------------------------------------

### import data & libraries

We begin by importing the necessary libraries and loading our dataset.

```{r,  warning=FALSE, message=FALSE}
library(readxl)
library(dplyr)
library(ggplot2)
library(DT)
library(plotly)
library(car)
library(readxl)
library(lme4)
library(lmerTest)
library(splines)
library(rms)
library(mgcv)

read_excel_file <- function() {
  file_path <- "DATASET_V6_SMO.xlsx"
  if (!file.exists(file_path)) stop("File does not exist")
  dataset <- read_excel(file_path)
  return (dataset)
}


dataset <- read_excel_file()
```

------------------------------------------------------------------------

### Showing interactive table with DT package

We also install the DT package to create interactive tables by opening R and run the following command: `install.packages("DT")`

```{r}
datatable(dataset, 
          options = list(pageLength = 5, scrollX = TRUE))
```

------------------------------------------------------------------------

### Handling missing values

We define a function to replace specific values with NA based on predefined rules and apply these rules to our dataset. The rules list can always be expended without changing the function.

```{r}
replace_values_with_na_mutate <- function(df, rules) {
  df %>%
    mutate(across(
      .cols = names(rules),
      .fns = ~ if_else(. %in% rules[[cur_column()]], NA_real_, .)
    ))
}

rules <- list(
  Age = c(9999),
  TBV = c(9999),
  TBV_Ratio = c(9999),
  Mutation = c(9999)
)
```

------------------------------------------------------------------------

### Subset data

We'll create subsets of our dataset based on the Disease column to separate DMD (patients with disease) and HC (healthy control patients). We also handle the missing values with the `replace_values_with_na_mutate` function based on our defined rules.

```{r}

dmd <- dataset[dataset$Disease == 1, ]
hc <- dataset[dataset$Disease == 0, ]

dmd <- replace_values_with_na_mutate(dmd, rules)
hc <- replace_values_with_na_mutate(hc, rules)
```

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Output the number of patients in the DMD group
message("DMD group amount of patients: ", nrow(dmd), "\n")

```

### HC

```{r}
# Output the number of patients in the HC group
message("HC group amount of patients: ", nrow(hc), "\n")

```

------------------------------------------------------------------------
:::

## Patients Demographics

To get a better understanding of patients demographics, we will categorize patients based on their age group. We will create a new column called `age_group` and categorize patients based on their age.

We also create the subset of the DMD and HC groups based on patient ID to distinguish adults, kids and the country they're from. Which in this case can be either the Netherlands or UK. We can count the amount of patients in each group with the nrow() function.

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Subset DMD patients by country and age group
dmd_adults_nl <- dmd[grepl("^DMDBA", dmd$ID), ]   # NL adults
dmd_kids_nl <- dmd[grepl("^DMDBNL", dmd$ID), ]    # NL kids
dmd_kids_uk <- dmd[grepl("^DMDBUK", dmd$ID), ]    # UK kids

```

### HC

```{r}
# Subset HC patients by country and age group
hc_adults_nl <- hc[grepl("^DMDBA", hc$ID), ]      # NL adults
hc_kids_nl <- hc[grepl("^DMDBNL", hc$ID), ]       # NL kids
hc_kids_uk <- hc[grepl("^DMDBUK", hc$ID), ]       # UK kids

```
:::

------------------------------------------------------------------------

### Count the number of patients in each subgroup

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Output the number of patients in each DMD subgroup
message("DMD amount of NL adults:", nrow(dmd_adults_nl))
message("DMD amount of NL kids:", nrow(dmd_kids_nl))
message("DMD amount of UK kids:", nrow(dmd_kids_uk), "\n")
```

### HC

```{r}
# Output the number of patients in each HC subgroup
message("HC amount of NL adults:", nrow(hc_adults_nl))
message("HC amount of NL kids:", nrow(hc_kids_nl))
message("HC amount of UK kids:", nrow(hc_kids_uk), "\n")
```

### kids

```{r}
# Output the number of kids in the DMD and HC groups
message("DMD amount of NL kids:", nrow(dmd_kids_nl))
message("DMD amount of UK kids:", nrow(dmd_kids_uk), "\n")
```

### Adults

```{r}
# Output the number of adults in the HC group
message("HC amount of NL adults:", nrow(hc_adults_nl))
message("HC amount of NL kids:", nrow(hc_kids_nl))
message("HC amount of UK kids:", nrow(hc_kids_uk), "\n")
```

### Netherlands

```{r}
# Output the number of DMD and HC patients from the Netherlands
message("DMD amount of NL adults:", nrow(dmd_adults_nl))
message("DMD amount of NL kids:", nrow(dmd_kids_nl))
message("HC amount of NL adults:", nrow(hc_adults_nl))
message("HC amount of NL kids:", nrow(hc_kids_nl))
```

### UK

```{r}
# Output the number of DMD and HC patients from the UK
message("DMD amount of UK kids:", nrow(dmd_kids_uk))
message("HC amount of UK kids:", nrow(hc_kids_uk))
```

:::

------------------------------------------------------------------------

### Mean and Standard Deviation of Age

We calculate the mean and standard deviation of the age for both DMD and HC patients to understand the distribution of ages in each group.

::: {.panel-tabset .nav-pills}

### Mean Age
We calculate the mean of the age for both DMD and HC patients by using the `mean` function. 

```{r}
mean_dmd_age <- round(mean(dmd$Age, na.rm = TRUE), 1)
message("Mean age of DMD patients:", mean_dmd_age)
mean_hc_age <- round(mean(hc$Age, na.rm = TRUE), 1)
message("Mean age of HC patients:", mean_hc_age)

```

### Standard Deviation Age
We also calculate the standard deviation of the age for both groups using the `sd` function.

```{r}
sd_dmd_age <- round(sd(dmd$Age, na.rm = TRUE), 1)
message("Standard deviation of DMD patients age:", sd_dmd_age)

sd_hc_age <- round(sd(hc$Age, na.rm = TRUE), 1)
message("Standard deviation of HC patients age:", sd_hc_age)

```

:::

### LeveneTest
```{r}
# Levene's test for homogeneity of variances
patients_lavene_test <- rbind(
  transform(dmd, group = "DMD"),
  transform(hc, group = "HC")
)

# Convert group to a factor
patients_lavene_test$group <- as.factor(patients_lavene_test$group)

# Perform Levene's test for homohoeneity of variances
levene_test <- leveneTest(Age ~ group, data = patients_lavene_test)

print(levene_test)

```

------------------------------------------------------------------------

## Descriptive analysis
Here we will perform a descriptive analysis of the dataset to understand the distribution of ages for DMD and HC patients. We will create box plots, histograms, and QQ plots to visualize the age distribution of patients in each group.

### Box plots age distribution

We will create box plots to visualize the distribution of ages for DMD and HC patients. The box plots will help us understand the age distribution of patients in each group. We will use the `boxplot` function to create the plots
```{r}
# on the y-axis we need to label it age and on the x-axis we need to label it DMD and HC
par(mfrow = c(1, 2))
boxplot(dmd$Age, main = "DMD Age Distribution", ylab = "Age", col = "red")
boxplot(hc$Age, main = "HC Age Distribution", ylab = "Age", col = "green")
```

### histogram plots age distribution
We will create histograms to visualize the age distribution of DMD and HC patients. The histograms will help us understand the distribution of ages in each group. We will use the `hist` function to create the plots.

```{r}
# Create histograms to visualize the age distribution of DMD and HC patients
par(mfrow = c(1, 2))
hist(dmd$Age, main = "DMD Age Distribution", xlab = "Age", col = "red")
hist(hc$Age, main = "HC Age Distribution", xlab = "Age", col = "green")
```

### qq plots age distribution
We will create QQ plots to compare the age distribution of DMD and HC patients with a normal distribution. The QQ plots will help us understand if the age distribution is normal or not. We will use the `qqnorm` and `qqline` functions to create the plots.


```{r}
# Create QQ plots to compare the age distribution of DMD and HC patients with a normal distribution
par(mfrow = c(1, 2))
qqnorm(dmd$Age, main = "QQ plot of DMD Age Distribution"); qqline(dmd$Age, col = "red")
qqnorm(hc$Age, main = "QQ plot of HC Age Distribution"); qqline(hc$Age, col = "green")
```

### Safiro Wilk Test for Age Distribution
::: {.panel-tabset .nav-pills}
### DMD
```{r}
# Shapiro-Wilk normality test for DMD age distribution
print(shapiro.test(dmd$Age))
```
### HC
```{r}
# Shapiro-Wilk normality test for HC age distribution
print(shapiro.test(hc$Age))
```

:::

### Density Plots for Age Distribution
```{r}
# Create density plots to visualize the age distribution of DMD and HC patients
par(mfrow = c(1, 2))
plot(density(dmd$Age, na.rm = TRUE), main = "Density DMD Age Distribution", col = "red")
plot(density(hc$Age, na.rm = TRUE), main = "Density HC Age Distribution", col ="green")
```



### Map Visualization of countries with patients

Here we visualize the countries where the patients are. Our dataset contains patients from the Netherlands and the UK. We will plot the countries on the map to visualize the distribution of patients.

```{r}
# Load the required package
library(maps)

# No margin
par(mar=c(0,0,0,0))

# World map focused on Western Europe and the UK
map('world',
    col="#d9d9d9", fill=TRUE, bg="white", lwd=0.5,
    mar=rep(0,4), border="#999999", ylim=c(45, 60), xlim=c(-10, 10)
)

# Cities coordinates
London <- c(-0.1276, 51.5074)  # Longitude and latitude for London
Amsterdam <- c(4.9041, 52.3676)  # Longitude and latitude for Amsterdam

# Data frame
data <- rbind(London, Amsterdam) %>% 
  as.data.frame()
colnames(data) <- c("long", "lat")

# Show the cities on the map
points(x=data$long, y=data$lat, col="darkred", cex=2.5, pch=19)
```

------------------------------------------------------------------------

## Age Group Analysis

We want to categorize patients into different age groups based on the visit number to understand the age distribution of patients. We will categorize patients into the following age groups: 0 - 5 years old, 6 - 12 years old, 13 - 19 years old, 20 - 25 years old, and 26+ years old.

#### Categorize patients into different age groups based on the visit number using the `mutate` and `case_when` functions to get the age distrubution of the patients.


```{r}
# categorize_age function to categorize patients into different age groups
categorize_age <- function(age) {
  case_when(
    age <= 5 ~ "0 - 5 years old",
    age <= 12 ~ "6 - 12 years old",
    age <= 19 ~ "13 - 19 years old",
    age <= 25 ~ "20 - 25 years old",
    TRUE ~ "26+ years old"
  )
}

```


::: callout-note
Age Groups: Defined as "0 - 5 years old," "6 - 12 years old," "13 - 19 years old," "20 - 25 years old," and "26+ years old."
:::

Here we define a function to display the number of patients in each age group and the percentage of patients in each group.
```{r}
# display_age_groups function to display the number of patients in each age group and the percentage of patients in each group
display_age_groups <- function(df, group_name) {
  df <- df %>% mutate(age_group = categorize_age(Age))
  age_groups <- c("0 - 5 years old", "6 - 12 years old", "13 - 19 years old", "20 - 25 years old", "26+ years old")
  total_patients <- nrow(df)
  
  message(group_name, " patients by age group:")
  for (age_group in age_groups) {
    count <- nrow(df[df$age_group == age_group, ])
    percentage <- round(100 / total_patients * count, 1)
    message(sprintf("%s: %d (%.1f%%)", age_group, count, percentage))
  }
}
```

::: callout-note
Percentage calculation: `(100 / total number of patients) * number of patients in each age group`
:::


::: {.panel-tabset .nav-pills}
### DMD 1st visit

```{r}
dmd_first_visit <- dmd %>% filter(Visit == 1)
display_age_groups(dmd_first_visit, "DMD first visit")

```

### DMD 2nd visit

```{r}
dmd_second_visit <- dmd %>% filter(Visit == 2)
display_age_groups(dmd_second_visit, "DMD second visit")
```

### HC 1st visit
```{r}
hc_first_visit <- hc %>% filter(Visit == 1)
display_age_groups(hc_first_visit, "HC first visit")
```

### HC 2nd visit
```{r}
hc_second_visit <- hc %>% filter(Visit == 2)
display_age_groups(hc_second_visit, "HC second visit")
```

### DMD combined
```{r}
dmd_combined <- dmd %>% filter(Visit == 1 | Visit == 2)
display_age_groups(dmd_combined, "DMD combined")
```

### HC combined
```{r}
hc_combined <- hc %>% filter(Visit == 1 | Visit == 2)
display_age_groups(hc_combined, "HC combined")
```
:::

------------------------------------------------------------------------

## Scanner Groups Analysis

Here we analyze scanner groups for both DMD and HC patients to determine the number of patients in each group.

### Filter data by the scanner group column

We define the scanner groups for DMD and HC patients and filter the data based on the scanner group.

```{r}
# Define scanner groups
scanner_groups <- c("DMDBNL", "DMDBUK", "DMDBA")
```

### Assign patients to scanner groups based on the Scannertype column

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Assign scanner groups to DMD dataset
dmd_scannertype <- dmd %>%
  mutate(
    scanner_group = case_when(
      Scannertype == 0 ~ "DMDBNL",
      Scannertype == 1 ~ "DMDBUK",
      Scannertype == 2 ~ "DMDBA"
    )
  )

```

### HC

```{r}
# Assign scanner groups to HC dataset
hc_scannertype <- hc %>%
  mutate(
    scanner_group = case_when(
      Scannertype == 0 ~ "DMDBNL",
      Scannertype == 1 ~ "DMDBUK",
      Scannertype == 2 ~ "DMDBA"
    )
  )
```
:::

::: callout-note
-   Scanner Groups: Defined as "DMDBNL," "DMDBUK," and "DMDBA."
:::


### Count the number of patients in each scanner group
::: {.panel-tabset .nav-pills}

### DMD
```{r}
# Output the number of patients in each scanner group
scanner_group <- unique(dmd_scannertype$scanner_group)

# DMD Scanner Group Analysis
for (scanner_group in scanner_group) {
  patients_count <- nrow(dmd_scannertype[dmd_scannertype$scanner_group == scanner_group, ])
  message("DMD patients with scanner group ", scanner_group, " is: ", patients_count)
}

```

### HC

```{r}
# Output the number of patients in each scanner group
scanner_group <- unique(dmd_scannertype$scanner_group)

# HC Scanner Group Analysis
for (scanner_group in scanner_group) {
  patients_count <- nrow(hc_scannertype[hc_scannertype$scanner_group == scanner_group, ])
  message("HC patients with scanner group ", scanner_group, " is: ", patients_count)
}
```

:::

### Calculate the percentage of patients in each scanner group

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Output the number of patients in each scanner group
scanner_group <- unique(dmd_scannertype$scanner_group)

# DMD Scanner Group Analysis
for (scanner_group in scanner_groups) {
  patients_count <- nrow(dmd_scannertype[dmd_scannertype$scanner_group == scanner_group, ])
  percentage <- round(100 / nrow(dmd) * patients_count, 1)
  message("Percentage of DMD patients with scanner group ", scanner_group, " is: ", percentage, "%")
}
```

### HC

```{r}
scanner_groups <- unique(hc_scannertype$scanner_group)

# Calculate percentage of patients in each scanner group for HC dataset
for (scanner_group in scanner_groups) {
  patients_count <- nrow(hc_scannertype[hc_scannertype$scanner_group == scanner_group, ])
  percentage <- round(100 / nrow(hc) * patients_count, 1)
  message("Percentage of HC patients with scanner group ", scanner_group, " is: ", percentage, "%")
}

```
:::

## TBV Ratio Analysis

We will conduct a thorough analysis of the TBV ratio for both DMD and HC patients. This will involve calculating the mean and standard deviation, creating histograms, QQ plots, and boxplots to visualize data distributions, as well as assasing correlations and performing linear regression anal

### Calculate Mean and Standard Deviation of TBV Ratio

We first calculate the mean and standard deviation of the TBV ratio for both DMD and HC groups.

::: {.panel-tabset .nav-pills}
### Mean TBV Ratio

```{r}
# Mean of the TBV ratio for DMD patients
dmd_mean_tbv_ratio <- round(mean(dmd$TBV_Ratio, na.rm = TRUE), 1)
message("Mean of the TBV ratio of DMD patients:", dmd_mean_tbv_ratio)

# Mean of the TBV ratio for HC patients
hc_mean_tbv_ratio <- round(mean(hc$TBV_Ratio, na.rm = TRUE), 1)
message("Mean of the TBV ratio of HC patients:", hc_mean_tbv_ratio)
```

### Standard Deviation TBV Ratio

```{r}
# Standard deviation of the TBV ratio for DMD patients
dmd_sd_tbv_ratio <- round(sd(dmd$TBV_Ratio, na.rm = TRUE), 1)
message("Standard deviation of the TBV ratio of DMD patients:", dmd_sd_tbv_ratio)

# Standard deviation of the TBV ratio for HC patients
hc_sd_tbv_ratio <- round(sd(hc$TBV_Ratio, na.rm = TRUE), 1)
message("Standard deviation of the TBV ratio of HC patients:", hc_sd_tbv_ratio)
```
:::

### Visualize TBV Ratio Distribution

We use histograms, QQ plots, and boxplots to visualize the distribution of TBV ratios for both groups.

::: {.panel-tabset .nav-pills}
### Histograms

The histograms display the distribution of TBV ratios for DMD and HC groups.

```{r}
# Histograms
par(mfrow = c(1, 2))
hist(dmd$TBV_Ratio, main = "TBV ratio of DMD patients", xlab = "TBV ratio DMD", col = "red", breaks = 20)
hist(hc$TBV_Ratio, main = "TBV ratio of HC patients", xlab = "TBV ratio HC", col = "green", breaks = 20)
```

### QQ Plots

The QQ plots are used to compare the distribution of TBV ratios for DMD and HC groups with a normal distribution.

```{r}
# QQ plots
par(mfrow = c(1, 2))
qqnorm(dmd$TBV_Ratio, main = "QQ plot of TBV ratio of DMD patients")
qqline(dmd$TBV_Ratio, col = "red")
qqnorm(hc$TBV_Ratio, main = "QQ plot of TBV ratio of HC patients")
qqline(hc$TBV_Ratio, col = "green")
```

### Boxplots

The boxplots visualize the distribution of TBV ratios for DMD and HC groups.

```{r}
par(mfrow = c(1, 2))
bb <- boxplot(dmd$TBV_Ratio, main = "TBV ratio of DMD patients", col = "red")
boxplot(hc$TBV_Ratio, main = "TBV ratio of HC patients", col = "green")
```
:::

### Density Plots

We create density plots to further examine the distribution of TBV ratios for both DMD and HC groups.

```{r}
# Density plots
par(mfrow = c(1, 2))
plot(density(dmd$TBV_Ratio, na.rm = TRUE), main = "Density TBV ratio of DMD", col = "red")
plot(density(hc$TBV_Ratio, na.rm = TRUE), main = "Density TBV ratio of HC", col = "green")
```

### Scatter Plots and Correlation

These scatter plots visualize the relationship between age and TBV ratio, and the correlation is calculated for both groups

::: {.panel-tabset .nav-pills}
#### Scatter Plots

We create scatter plots to visualize the relationship between age and TBV ratio for both DMD and HC groups.

```{r}
# Scatter plots
par(mfrow = c(1, 2))
plot(dmd$Age, dmd$TBV_Ratio, main = "Scatter Age and TBV ratio of DMD", col = "red")
plot(hc$Age, hc$TBV_Ratio, main = "Scatter Age and TBV ratio of HC", col = "green")
```

#### Correlation

We calculate the correlation between age and TBV ratio for both DMD and HC groups.

```{r}
# Correlation
correlation_dmd <- round(cor(dmd$Age, dmd$TBV_Ratio, use = "complete.obs"), 2)
correlation_hc <- round(cor(hc$Age, hc$TBV_Ratio, use = "complete.obs"), 2)
message("Correlation between Age and TBV ratio of DMD:", correlation_dmd)
message("Correlation between Age and TBV ratio of HC:", correlation_hc)
```
:::


### Pearson Correlation Test

We perform a Pearson correlation test to assess the relationship between age and TBV ratio for both groups.

::: {.panel-tabset .nav-pills}

### DMD
```{r}
# Pearson correlation test
cor_test_dmd <- cor.test(dmd$Age, dmd$TBV_Ratio)
print(cor_test_dmd)
```


### HC
```{r}
# Pearson correlation test
cor_test_hc <- cor.test(hc$Age, hc$TBV_Ratio)
print(cor_test_hc)
```

:::

### Linear Regression Analysis

We perform linear regression analysis to assess the relationship between age and TBV ratio for both groups. The results are displayed in the summary output.

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Linear regression of DMD
lm_dmd <- lm(dmd$TBV_Ratio ~ dmd$Age)
print(summary(lm_dmd))
```

### HC

```{r}
# Linear regression of HC
lm_hc <- lm(hc$TBV_Ratio ~ hc$Age)
print(summary(lm_hc))
```
:::

### Plot Linear Regression

Here we plot the linear regression of DMD and HC groups to visualize the relationship between age and TBV ratio. The blue line represents the linear regression line.

```{r}
# Plot linear regression
par(mfrow = c(1, 2))
plot(dmd$Age, dmd$TBV_Ratio, main = "Linear regression of DMD", col = "red")
abline(lm_dmd, col = "blue")
plot(hc$Age, hc$TBV_Ratio, main = "Linear regression of HC", col = "green")
abline(lm_hc, col = "blue")
```

### Noramity Test

We apply the Shapiro-Wilk test to check the normality of the TBV distributions for both groups.

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Shapiro-Wilk normality test for DMD
print(shapiro.test(dmd$TBV_Ratio))
```

### HC

```{r}
# Shapiro-Wilk normality test for HC
print(shapiro.test(hc$TBV_Ratio))
```
:::

------------------------------------------------------------------------


### Levene's Test

We perform Levene's test to assess the homogeneity of variances between DMD and HC groups.

```{r}
# Levene's test for homogeneity of variances
tbv_lavene_test <- rbind(
  transform(dmd, group = "DMD"),
  transform(hc, group = "HC")
)

# Convert group to a factor
tbv_lavene_test$group <- as.factor(tbv_lavene_test$group)

# Perform Levene's test for homohoeneity of variances
levene_test_tbv <- leveneTest(TBV_Ratio ~ group, data = tbv_lavene_test)
print(levene_test_tbv)
```

------------------------------------------------------------------------

### T-Test

We perform a t-test to compare the TBV ratio between DMD and HC groups.

```{r}
# T-test for TBV ratio
t_test <- t.test(dmd$TBV_Ratio, hc$TBV_Ratio)
print(t_test)
```

## Mutation Group analysis 

We will analyze the mutation group for both DMD and HC patients to determine the number of patients in each group.

### Assign patients to mutation groups based on the Mutation column

```{r}
# categorize_mutation function to categorize patients into different mutation groups
categorize_mutation <- function(mutation) {
  case_when(
    mutation == 0 ~ "Healthy",
    mutation == 1 ~ "Proximal",
    mutation == 2 ~ "Distal",
    mutation == 3 ~ "Unknown",
    TRUE ~ NA_character_
  )
}
```


### Count the number of patients in each mutation group and percentage

::: callout-note
We calculate the percentage of patients in each mutation group for both DMD and HC groups. The percentage is calculated as `(100 / total number of patients) * number of patients in each mutation group`. 

:::

::: callout-note
Mutation Groups: Defined as "Healthy," "Proximal," "Distal," and "Unknown."
:::

```{r}
mutation_groups <- c("Healthy", "Proximal", "Distal", "Unknown")

display_mutation_groups <- function(df, group_name) {
  df <- df %>% mutate(mutation_group = categorize_mutation(Mutation))
  
  total_patients <- nrow(df)
  
  message(group_name, " patients by mutation group:")
  for (group in mutation_groups) {
    count <- sum(df$mutation_group == group, na.rm = TRUE)
    percentage <- round(100 / total_patients * count, 1)
    message(sprintf("%s: %d (%.1f%%)", group, count, percentage))
  }
}
```

::: {.panel-tabset .nav-pills}

### DMD
```{r}
dmd_mutation <- dmd %>% mutate(mutation_group = categorize_mutation(Mutation))
display_mutation_groups(dmd_mutation, "DMD")
```

### HC 
```{r}
hc_mutation <- hc %>% mutate(mutation_group = categorize_mutation(Mutation))
display_mutation_groups(hc_mutation, "HC")
```

:::

## Corticosteroid Analysis

We will analyze the corticosteroid treatment for both DMD and HC patients to determine the number of patients in each group.

### Assign patients to corticosteroid groups based on the Corticosteroid column
```{r}
categorize_corticosteroid <- function(df) {
  df %>%
    mutate(
      corticosteroid_group = case_when(
        Corticosteroid == 0 ~ "No",
        Corticosteroid == 1 ~ "Yes",
        Corticosteroid == 2 ~ "Unknown"
      )
    )
}
```

### Calculate the percentage of patients in each corticosteroid group

We calculate the percentage of patients in each corticosteroid group for both DMD and HC groups. The percentage is calculated as `(100 / total number of patients) * number of patients in each corticosteroid group`.


```{r}
print_group_percentages <- function(patient_type, df, group_column) {
  if (!(group_column %in% names(df))) {
    stop(paste("Column", group_column, "does not exist in the dataframe."))
  }
  
  df <- df %>% filter(!is.na(!!sym(group_column)))
  
  # Calculate group percentages and output the results
  group_counts <- df %>%
    count(!!sym(group_column)) %>%
    mutate(percentage = round(100 / sum(n) * n, 1))
  
  message(patient_type, " results :")
  #message(patient_type, " patients by ", group_column, " :")
  print(group_counts)
                      
}
```

Now we calculate the percentage of patients in each corticosteroid group for both DMD and HC groups.

::: {.panel-tabset .nav-pills}
### DMD

```{r}
# Calculate the percentage of patients in each corticosteroid group for DMD
dmd_corticosteroid <- categorize_corticosteroid(dmd)
print_group_percentages("DMD", dmd_corticosteroid, "corticosteroid_group")
```

### HC
```{r}
# Calculate the percentage of patients in each corticosteroid group for HC
hc_corticosteroid <- categorize_corticosteroid(hc)
print_group_percentages("HC", hc_corticosteroid, "corticosteroid_group")
```

:::

## Inferential statistics

We will perform inferential statistics to compare the TBV ratio between DMD and HC groups. We will conduct a t-test to determine if there is a significant difference in the TBV ratio between the two groups.


### Combine DMD and HC datasets


Here we combine the DMD and HC datasets to perform inferential statistics on the TBV ratio between the two groups.
With the is.finite function, we filter out any missing values in the Age and TBV columns. We then create a new column `group` to identify the patients as either DMD or HC.

```{r}
# Combine DMD and HC datasets
all_patients <- rbind(dmd, hc)
all_patients <- all_patients %>%
  mutate(group = ifelse(Disease == 1, "DMD", "HC")) %>%
  filter(is.finite(Age), is.finite(TBV))
```


### T-Test for TBV Ratio and Group Comparison 
We model the TBV ratio as a function of the group and age of the patients using a linear regression model. We then plot the diagnostic plots for the linear model to assess the model assumptions.

In the right tab we will perform a linear regression analysis to predict the brain volume based on the age and group of the patients.

::: {.panel-tabset .nav-pills}

### T-Test

```{r}
model <- lm(TBV_Ratio ~ Age, data = all_patients)
summary(model)
```

### Linear Regression Analysis

```{r}
# Create a scatter plot of the TBV ratio and age
# Plot the diagnostic plots for the linear model
# 1: Residuals vs Fitted
# 2: Normal Q-Q
plot(model, c(1, 2))
# Create a histogram of the residuals
hist(model$residuals)
```

:::


To prepare the data for the linear regression analysis, we will add a new column `Age^2` to the data frame to model the quadratic relationship between the TBV ratio and age of the patients.

```{r}
# For the quadratic model, we can add a new column Age^2 to the data frame
all_patients <- all_patients %>%
  mutate(Age2 = Age^2)

#all_patients %>%
  #select(ID, Age, Age2) %>%
  #mutate(Age2_formatted = sprintf("%.1f", Age2)) %>%
  #print(n = Inf)

```

### Quadratic Model for TBV Ratio and Age
For the quadratic model, we will fit a linear regression model to predict the TBV ratio based on the age and age squared of the patients. We will then print the summary of the model to assess the model fit.

```{r}
# Fit a quadratic model to the data
model.Age2 <- lm(TBV_Ratio ~ Age + Age2, data = all_patients)
summary(model.Age2)

```

### Linear Mixed-Effects Model

Here with model.fit0 we will fit a linear mixed-effects model to predict the TBV ratio based on the age, age squared, and scanner type of the patients. We will then print the summary of the model to assess the model fit.
```{r}
model.fit0 <- lmer(TBV_Ratio ~ (1 | ID) + Age + Age2 + Scannertype, data = all_patients)
summary(model.fit0)

```


With model.fit we will fit a linear mixed-effects model to predict the TBV ratio based on the age, age squared, and group of the patients. We will then print the summary of the model to assess the model fit.
```{r}
model.fit <- lmer(TBV_Ratio ~ (1 | ID) + Age + Age2 + group + (group * Age) + (group * Age2), data = all_patients)
summary(model.fit)
```


### ANOVA Test
By using the `anova` function, we will perform an analysis of variance (ANOVA) to compare the linear mixed-effects models `model.fit0` and `model.fit` to determine if the group variable significantly improves the model fit.

```{r}
anova(model.fit0, model.fit)
```


Here we will perform a linear regression analysis to predict the brain volume based on the age and group of the patients.

```{r}
# Scatterplot of TBV ratio vs Age
p <- ggplot(all_patients, aes(x = Age, y = TBV, color = group)) +
  geom_point(na.rm = TRUE) +
  labs(title = "Scatterplot of Brain Volume", x = "Age", y = "TBV", color = "Group") +
  theme(plot.title = element_text(hjust = 0.5)) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  scale_color_manual(values = c("DMD" = "red", "HC" = "green")) +
  #theme_ft_rc()
  theme_classic()

p <- ggplotly(p)
p
```


## brain volume vs age


### Scatterplot of TBV vs Age

```{r}
# Scatterplot of TBV vs Age with color and shape by group and scanner type
p <- ggplot(all_patients, aes(x= Age, y = TBV, color = group)) +
  geom_point(aes(shape = as.factor(Scannertype))) +
  geom_smooth(method = "loess", se = FALSE) +
  scale_shape_discrete(name = "Scanner Type") +  # Separate legend for shape
  scale_color_discrete(name = "Group") +         # Separate legend for color
  labs(title = "Brain Volume vs Age", x = "Age", y = "TBV", color = "Group", shape = "Scanner Type") +
  theme_bw()

p <- ggplotly(p)
p
```


### Scatterplot of TBV vs Age faucet by scanner type

Here we will create a scatterplot of the brain volume (TBV) vs age for all patients. We will color and shape the points by group and scanner type to visualize the distribution of brain volume with respect to age.

The scatterplot will be faceted by scanner type to compare the relationship between brain volume and age across different scanners.

The faucet_wrap function is used to create a separate scatterplot for each scanner type.

```{r}
# Scatterplot of TBV vs Age with color and shape by group and scanner type
p <- ggplot(all_patients, aes(x= Age, y = TBV, color = group)) +
  geom_point(aes(shape = as.factor(Scannertype))) +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(~ Scannertype) + 
  labs(title = "Brain Volume vs Age", x = "Age", y = "TBV", color = "Group", shape = "Scanner Type") +
  theme_bw()

p <- ggplotly(p)
p
```


## Linear Regression Analysis

Here we will perform a linear regression analysis to predict the brain volume based on the age and group of the patients.


```{r}
clean_data <- all_patients[is.finite(all_patients$Age) & is.finite(all_patients$TBV), ]
model <- lm(TBV ~ Age, data = clean_data)
plot(all_patients$Age, all_patients$TBV, xlab = "Age", ylab = "TBV cm^3", pch = 20, col = "grey35")


# GLM model to predict the brain volume based on the age and group
# y = B0 + B1 * x1 + B2 * x2 + B3 * x1 * x2
# y = B0 + B1 * x1 + B2 * x2 + B3 * Bn * Xn + e
# B1 * x1 is the central determinent of the model
# B2 * x2 are the covariants of the model
model <- lm(TBV ~ Age, data = dmd)
model2 <- lm(TBV ~ Age, data = hc)
print(summary(model))
print(summary(model2))



plot(clean_data$Age, clean_data$TBV, xlab = "Age", ylab = "TBV cm^3",
pch = 20, col = "grey35")
abline(lm(TBV ~ Age, data = clean_data), col = "red")
lines(lowess(clean_data$Age, clean_data$TBV), col = "blue", lty = "longdash")
```